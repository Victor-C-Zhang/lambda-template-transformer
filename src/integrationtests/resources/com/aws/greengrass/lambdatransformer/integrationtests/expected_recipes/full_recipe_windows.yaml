RecipeFormatVersion: "2020-01-25"
ComponentName: "cloud-hello"
ComponentVersion: "3.2.1"
ComponentType: "aws.greengrass.lambda"
ComponentPublisher: "AWS Lambda"
ComponentSource: "arn:aws:lambda:us-west-2:958094261904:function:cloud-hello:2"
ComponentConfiguration:
  DefaultConfiguration:
    lambdaExecutionParameters:
      EnvironmentVariables:
        ENVVAR: "ENVVAL"
        ENVVAR1: "ENVVAL1"
    containerParams:
      mountROSysfs: true
      volumes:
        "0":
          source: "/dev/dsk/1"
          destination: "/dev/disk/1"
          permission: "rw"
          addGroupOwner: false
        "1":
          source: "/dev/app"
          destination: "/dev/application"
          permission: "ro"
          addGroupOwner: true
      devices:
        "0":
          path: "/dev/usb/1"
          permission: "ro"
          addGroupOwner: false
      memorySize: 4096
    containerMode: "GreengrassContainer"
    timeoutInSeconds: 5
    maxInstancesCount: 1000
    inputPayloadEncodingType: "binary"
    maxQueueSize: 10
    pinned: false
    maxIdleTimeInSeconds: 30
    statusTimeoutInSeconds: 60
    pubsubTopics:
      "0":
        topic: "topic/lambda"
        type: "PUB_SUB"
      "1":
        topic: "topic/cloud"
        type: "IOT_CORE"
ComponentDependencies:
  aws.greengrass.Cli:
    VersionRequirement: ">2.0.0"
    DependencyType: "SOFT"
  aws.greengrass.Nucleus:
    VersionRequirement: "=2.4.0"
    DependencyType: "HARD"
  aws.greengrass.LambdaLauncher:
    VersionRequirement: ">=2.0.0 <3.0.0"
    DependencyType: "HARD"
  aws.greengrass.LambdaRuntimes:
    VersionRequirement: ">=2.0.0 <3.0.0"
    DependencyType: "SOFT"
  aws.greengrass.TokenExchangeService:
    VersionRequirement: ">=2.0.0 <3.0.0"
    DependencyType: "HARD"
Manifests:
  - Platform:
      os: "linux"
      architecture: "amd64"
    Lifecycle: {}
    Artifacts:
      - Uri: "greengrass:lambda-artifact.zip"
        Unarchive: "ZIP"
        Permission:
          Read: "OWNER"
          Execute: "NONE"
  - Platform:
      os: "darwin"
      architecture: "amd64"
    Lifecycle: {}
    Artifacts:
      - Uri: "greengrass:lambda-artifact.zip"
        Unarchive: "ZIP"
        Permission:
          Read: "OWNER"
          Execute: "NONE"
Lifecycle:
  startup:
    requiresPrivilege: true
    script: "{aws.greengrass.LambdaLauncher:artifacts:path}/lambda-launcher start"
  setenv:
    AWS_GREENGRASS_LAMBDA_CONTAINER_MODE: "{configuration:/containerMode}"
    AWS_GREENGRASS_LAMBDA_ARN: "arn:aws:lambda:us-west-2:958094261904:function:cloud-hello:2"
    AWS_GREENGRASS_LAMBDA_FUNCTION_HANDLER: "index.handler"
    AWS_GREENGRASS_LAMBDA_ARTIFACT_PATH: "{artifacts:decompressedPath}/lambda-artifact"
    AWS_GREENGRASS_LAMBDA_CONTAINER_PARAMS: "{configuration:/containerParams}"
    AWS_GREENGRASS_LAMBDA_STATUS_TIMEOUT_SECONDS: "{configuration:/statusTimeoutInSeconds}"
    AWS_GREENGRASS_LAMBDA_ENCODING_TYPE: "{configuration:/inputPayloadEncodingType}"
    AWS_GREENGRASS_LAMBDA_PARAMS: "{configuration:/lambdaExecutionParameters}"
    AWS_GREENGRASS_LAMBDA_RUNTIME_PATH: "{aws.greengrass.LambdaRuntimes:artifacts:decompressedPath}/runtime/"
    AWS_GREENGRASS_LAMBDA_EXEC_ARGS: "[\"nodejs12.x\",\"/runtime/nodejs/lambda_nodejs_runtime.js\"\
      ,\"--handler=index.handler\",\"--arg\"]"
    AWS_GREENGRASS_LAMBDA_RUNTIME: "nodejs12.x"
  shutdown:
    requiresPrivilege: true
    script: "{aws.greengrass.LambdaLauncher:artifacts:path}/lambda-launcher stop;\
      \ {aws.greengrass.LambdaLauncher:artifacts:path}/lambda-launcher clean"
